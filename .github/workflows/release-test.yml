name: Release Test

on: push

jobs:
  prerequisites:
    name: Pre-requisites for building
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'sjohnr/gradle-test' }}
    outputs:
      runjobs: ${{ steps.continue.outputs.runjobs }}
      project_version: ${{ steps.continue.outputs.project_version }}
    steps:
      - uses: actions/checkout@v2
      - id: continue
        name: Determine if should continue
        run: |
          # Run jobs if in upstream repository
          echo "Setting runjobs=true"
          echo "::set-output name=runjobs::true"
          # Extract version from gradle.properties
          version=$(cat gradle.properties | grep "version=" | awk -F'=' '{print $2}')
          echo "Setting project_version=$version"
          echo "::set-output name=project_version::$version"
  release:
    name: Release next version
    needs: [prerequisites]
    runs-on: ubuntu-latest
    if: ${{ endsWith(needs.prerequisites.outputs.project_version, '-SNAPSHOT') }}
    env:
      REPO: ${{ github.repository }}
      BRANCH: ${{ github.ref_name }}
      TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_ACTIONS_REPO_TOKEN }}
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
      - name: Set up git config
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
      - id: next-version
        name: Calculate next release version
        run: |
          version=$(cat gradle.properties | grep "version=" | awk -F'=' '{print $2}')
          nextVersion=$(./gradlew -q getNextReleaseMilestone -PgitHubAccessToken=$TOKEN)
          hasNoOpenIssues=$(./gradlew -q checkMilestoneHasNoOpenIssues -PnextVersion=$nextVersion -PgitHubAccessToken=$TOKEN)
          isDueToday=$(./gradlew -q checkIsMilestoneDueToday -PnextVersion=$nextVersion -PgitHubAccessToken=$TOKEN)
          echo "::set-output name=version::$version"
          echo "::set-output name=next_version::$nextVersion"
          echo "::set-output name=has_no_open_issues::$hasNoOpenIssues"
          echo "::set-output name=is_due_today::$isDueToday"
      - name: Update to next snapshot version
        if: ${{ steps.next-version.outputs.has_no_open_issues == 'true' && steps.next-version.outputs.is_due_today == 'true' }}
        run: |
          version=${{ steps.next-version.outputs.version }}
          nextVersion=${{ steps.next-version.outputs.next_version }}
          sed -i "s/version=$version/version=$nextVersion/" gradle.properties
          git commit -am "Release $nextVersion"
          git tag $nextVersion
          git push
          git push origin $nextVersion
