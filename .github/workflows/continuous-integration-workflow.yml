name: Build and Deploy

on:
  push:
    branches:
      - '**'
  schedule:
    - cron: '0 10 * * *' # Once per day at 10am UTC
  workflow_dispatch:

env:
  DEPLOY_ARTIFACTS: false
  DEPLOY_DOCS: false
  GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER }}
  GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
  GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY }}
  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  OSSRH_TOKEN_USERNAME: ${{ secrets.OSSRH_S01_TOKEN_USERNAME }}
  OSSRH_TOKEN_PASSWORD: ${{ secrets.OSSRH_S01_TOKEN_PASSWORD }}
  ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
  DOCS_USERNAME: ${{ secrets.DOCS_USERNAME }}
  DOCS_SSH_KEY: ${{ secrets.DOCS_SSH_KEY }}
  DOCS_HOST: ${{ secrets.DOCS_HOST }}

jobs:
  prerequisites:
    name: Pre-requisites for building
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'sjohnr/gradle-test' }}
    outputs:
      project_version: ${{ steps.continue.outputs.project_version }}
    steps:
      - uses: actions/checkout@v2
      - id: continue
        name: Determine if should continue
        run: |
          # Extract version from gradle.properties
          version=$(cat gradle.properties | grep "version=" | awk -F'=' '{print $2}')
          echo "Setting project_version=$version"
          echo "::set-output name=project_version::$version"
  build:
    name: Build
    needs: [prerequisites]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        jdk: [17]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: sjohnr/spring-gradle-build-action@v1-beta
        with:
          java-version: ${{ matrix.jdk }}
      - name: Build
        run: ./gradlew clean build --continue -PartifactoryUsername="$ARTIFACTORY_USERNAME" -PartifactoryPassword="$ARTIFACTORY_PASSWORD"
  test:
    name: Test against snapshots
    needs: [prerequisites]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: sjohnr/spring-gradle-build-action@v1-beta
      - name: Test against snapshots
        run: ./gradlew test --refresh-dependencies -PartifactoryUsername="$ARTIFACTORY_USERNAME" -PartifactoryPassword="$ARTIFACTORY_PASSWORD" -PforceMavenRepositories=snapshot -PspringFrameworkVersion="5.3.+" -PspringSecurityVersion="5.5.+" --stacktrace
  deploy_artifacts:
    name: Deploy artifacts
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: sjohnr/spring-gradle-build-action@v1-beta
      - name: Deploy artifacts
        if: ${{ env.DEPLOY_ARTIFACTS == 'true' }}
        run: ./gradlew publishArtifacts finalizeDeployArtifacts --stacktrace -PossrhUsername="$OSSRH_TOKEN_USERNAME" -PossrhPassword="$OSSRH_TOKEN_PASSWORD" -PartifactoryUsername="$ARTIFACTORY_USERNAME" -PartifactoryPassword="$ARTIFACTORY_PASSWORD" -PsigningKey="$GPG_PRIVATE_KEY" -PsigningPassword="$GPG_PASSPHRASE"
  deploy_docs:
    name: Deploy docs
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: sjohnr/spring-gradle-build-action@v1-beta
      - name: Deploy docs
        if: ${{ env.DEPLOY_DOCS == 'true' }}
        run: ./gradlew deployDocs --stacktrace -PdeployDocsSshKey="$DOCS_SSH_KEY" -PdeployDocsSshUsername="$DOCS_USERNAME" -PdeployDocsHost="$DOCS_HOST"
  release:
    name: Perform release
    needs: [prerequisites, deploy_artifacts, deploy_docs]
    runs-on: ubuntu-latest
    timeout-minutes: 90
    if: ${{ !endsWith(needs.prerequisites.outputs.project_version, '-SNAPSHOT') }}
    env:
      REPO: ${{ github.repository }}
      BRANCH: ${{ github.ref_name }}
      TOKEN: ${{ github.token }}
      VERSION: ${{ needs.prerequisites.outputs.project_version }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_ACTIONS_REPO_TOKEN }}
      - uses: sjohnr/spring-gradle-build-action@v1-beta
      - name: Wait for Artifactory artifacts
        if: ${{ contains(needs.prerequisites.outputs.project_version, '-RC') || contains(needs.prerequisites.outputs.project_version, '-M') }}
        run: |
          echo "Wait for artifacts of $REPO@$VERSION to appear on Artifactory."
          until curl -f -s https://repo.spring.io/artifactory/milestone/org/springframework/security/spring-security-core/$VERSION/ > /dev/null
          do
            sleep 30
            echo "."
          done
          echo "Artifacts for $REPO@$VERSION have been released to Artifactory."
      - name: Wait for Maven Central artifacts
        if: ${{ !contains(needs.prerequisites.outputs.project_version, '-RC') && !contains(needs.prerequisites.outputs.project_version, '-M') }}
        run: |
          echo "Wait for artifacts of $REPO@$VERSION to appear on Maven Central."
          until curl -f -s https://repo1.maven.org/maven2/org/springframework/security/spring-security-core/$VERSION/ > /dev/null
          do
            sleep 30
            echo "."
          done
          echo "Artifacts for $REPO@$VERSION have been released to Maven Central."
      - name: Create GitHub release
        run: ./gradlew createGitHubRelease -PnextVersion=$VERSION -Pbranch=$BRANCH -PcreateRelease=true -PgitHubAccessToken=$TOKEN
      - name: Update to next snapshot version
        run: |
          version=$VERSION
          updatedVersion=$(./gradlew -q getNextSnapshotVersion)
          sed -i "s/version=$version/version=$updatedVersion/" gradle.properties
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git commit -am "Next development version"
          git push
